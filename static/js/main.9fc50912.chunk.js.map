{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","routes/Details.js","components/Navigation.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","About","props","console","log","Details","location","history","undefined","push","Navigation","fromNavigation","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6WAgDeA,MA3Cf,YAA8D,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC/C,OACI,qBAAKC,UAAU,QAAf,SACI,eAAC,IAAD,CAAMC,GAAI,CAENC,SAAS,UAAD,OAAYR,GACpBS,MAAO,CACHR,KAAMA,EACNC,MAAOA,EACPC,QAASA,EACTC,OAAQA,EACRC,OAAQA,IARhB,UAYI,qBAAKK,IAAKN,EAAQO,IAAKT,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA+BJ,IAC/B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACKD,EAAOO,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBR,UAAU,gBAA1B,SAA2CO,GAAlCC,QAGjB,oBAAGR,UAAU,iBAAb,UAA+BH,EAAQY,MAAM,EAAG,KAAhD,kBC+BLC,G,kNAnDbP,MAAQ,CACNQ,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,4DALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAGZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IANzB,2C,uDAQZ,WAIEQ,KAAKN,c,oBAEP,WACE,MAA8BM,KAAKhB,MAA3BQ,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACnB,OACA,yBAASZ,UAAU,YAAnB,SACGW,EAEC,qBAAKX,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGA,qBAAKA,UAAU,SAAf,SAEIY,EAAON,KAAI,SAAAc,GAAK,OACd,cAAC,EAAD,CAEE1B,GAAI0B,EAAM1B,GACVC,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAMC,mBACdtB,OAAQqB,EAAMrB,QANTqB,EAAM1B,e,GAjCV4B,IAAMC,Y,MCQVC,MAbf,SAAeC,GAEX,OADAC,QAAQC,IAAIF,GAER,sBAAKzB,UAAU,mBAAf,UACI,gJAIA,kECoBG4B,E,uKApBX,WACI,MAA8BT,KAAKM,MAA3BI,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAEIC,IAAnBF,EAAS1B,OAER2B,EAAQE,KAAK,O,oBAGrB,WACI,IAAQH,EAAaV,KAAKM,MAAlBI,SACR,OAAGA,EAAS1B,MACD,+BAAO0B,EAAS1B,MAAMP,QAGtB,S,GAhBG0B,IAAMC,W,YCWbU,MAhBf,WACI,OACI,sBAAKjC,UAAU,MAAf,UAGI,cAAC,IAAD,CAAMC,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAI,CACNC,SAAS,SACTC,MAAM,CACF+B,gBAAgB,IAHxB,uBC2GGC,MAff,WACE,OAGE,cAFA,CAEC,IAAD,WACE,cAAC,EAAD,IAEA,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW5B,IACxC,cAAC,IAAD,CAAO0B,KAAK,SAASE,UAAWd,IAEhC,cAAC,IAAD,CAAOY,KAAK,aAAaE,UAAWV,QC3G1CW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9fc50912.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\"\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <Link to={{\r\n                //pathname: \"/movie-details\",\r\n                pathname: `/movie/${id}`,  // ` << 변수를 사용할 때 이 특수문자를 사용해야함\r\n                state: { //클릭했을때 넘겨줄 데이터들\r\n                    year: year,\r\n                    title: title,\r\n                    summary: summary,\r\n                    poster: poster,\r\n                    genres: genres\r\n                }\r\n            }}>\r\n\r\n                <img src={poster} alt={title} title={title} />\r\n                <div className=\"movie__data\">\r\n                    <h3 className=\"movie__title\" >{title}</h3>\r\n                    <h5 className=\"movie__year\">{year}</h5>\r\n                    <ul className=\"movie__genres\">\r\n                        {genres.map((genre, index) => (\r\n                            <li key={index} className=\"genres__genre\">{genre}</li>\r\n                        ))}\r\n                    </ul>\r\n                    <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nMovie.propTypes =\r\n{\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n\r\n};\r\n\r\nexport default Movie;","\r\nimport React from 'react';\r\nimport axios from \"axios\"; \r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\"\r\n\r\n// 설치한 것들 : 'npm i axos', 'npm i gh-pages', 'npm i prop-types', 'npm i react-router-dom'\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: []\r\n  };\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: { movies }\r\n      }\r\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");  // sort_by=rating\r\n    this.setState({ movies, isLoading: false });\r\n  };\r\n  componentDidMount() {\r\n    // setTimeout(() => {\r\n    //   this.setState({isLoading: false});  // setState 에서 state에 있는 항목을 호출할 필요는 없다, 새로 생성해도 됨.\r\n    // },6000);\r\n    this.getMovies();\r\n  }\r\n  render() {\r\n    const { isLoading, movies } = this.state;\r\n    return (\r\n    <section className=\"container\">\r\n      {isLoading\r\n        ? (\r\n        <div className=\"loader\">\r\n          <span className=\"loader__text\">Loading...</span>\r\n        </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {\r\n              movies.map(movie => (\r\n                <Movie\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  year={movie.year}\r\n                  title={movie.title}\r\n                  summary={movie.summary}\r\n                  poster={movie.medium_cover_image}\r\n                  genres={movie.genres}\r\n                />\r\n              ))   //map을 사용하면 return이 있어야함\r\n            }\r\n          </div>\r\n        )}\r\n    </section>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Home;\r\n\r\n","import React from \"react\";\r\nimport \"./About.css\";\r\n\r\nfunction About(props) {\r\n    console.log(props);\r\n    return (\r\n        <div className=\"about__container\">\r\n            <span>\r\n                “Freedom is the freedom to say that two plus two make four. If that is\r\n                granted, all else follows.”\r\n            </span>\r\n            <span>− George Orwell, 1984</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\n\r\n// function을 이용해서 만들게되면 새로고침했을때 또는 링크클릭으로 이동하지 않는경우 아무정보 없는 빈페이지가 출력됨\r\n// function Details(props){\r\n//     console.log(props);\r\n//     return <span>hello</span>\r\n// }  \r\n\r\n\r\nclass Details extends React.Component{\r\n\r\n    componentDidMount(){\r\n        const { location, history } = this.props;\r\n\r\n        if(location.state === undefined)\r\n        {\r\n            history.push(\"/\") //홈으로 리다이렉트\r\n        }\r\n    }\r\n    render(){  // 새로고침 했을때 location이 존재하지않기 때문에 에러가 발생 -> if문으로 처리해줌. \r\n        const { location } = this.props;\r\n        if(location.state){\r\n            return <span>{location.state.title}</span>;\r\n        }\r\n        else{\r\n            return null;\r\n        }\r\n       \r\n    }\r\n}\r\n\r\nexport default Details;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <div className=\"nav\">\r\n            {/* 'a href'를 사용하면 전체 페이지를 새로고침하면서 리액트를 죽임. Link to를 사용하야함 */}\r\n            {/* <HashRouter> 라우터 바깥에서는 Link to를 사용 할 수 없음. */}\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to={{\r\n                pathname:\"/about\",\r\n                state:{\r\n                    fromNavigation: true\r\n                }\r\n            }}>About</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","\n//import PropTypes from \"prop-types\";\n\n\n// const foodILike = [\n//   {\n//     id: 1,\n//     name: \"kimchi\",\n//     image:\n//     \"https://kelliesfoodtoglow.com/wp-content/uploads/2016/10/kimchi1.jpg\"\n//     ,rating: 5\n//   },\n//   {\n//     id: 2,\n//     name: \"Samgyeopsal\",\n//     image:\n//     \"https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F7%2F77%2FSamgyeopsal-gui.jpg%2F1200px-Samgyeopsal-gui.jpg&f=1&nofb=1\"\n//     ,rating: 4.9\n\n//   }\n// ]\n\n/* Function 을 이용해 구현하는 방법 */\n// function renderFood(dish){\n//   console.log(dish)\n//   return <Food key={dish.id} name={dish.name} picture={dish.image} />\n// }\n\n// function App() {\n//   return (\n//     <div>\n//       {foodILike.map(renderFood)}\n//     </div>\n//   );\n// }\n/***********************************/\n// function Food({ name,picture, rating }){\n//   return (\n//   <div>\n//     <h2>I like {name}</h2>\n//     <h4>{rating}/5.0</h4>\n//     <img src ={picture} alt={name}/>\n\n//   </div>\n//   );\n// }\n\n// Food.propTypes = {\n//   //isRequired -> 필수를 의미\n//   name: PropTypes.string.isRequired,\n//   picture: PropTypes.string.isRequired,\n//   rating: PropTypes.number.isRequired\n// };\n\n// function App() {\n//   return (\n//     <div>\n//       {foodILike.map(dish=>(\n//         <Food key={dish.id} name ={dish.name} picture={dish.image} rating={dish.rating} />\n//       ))}\n//     </div>\n//   );\n// }\n\n/*\nclass App extends React.Component{\n  state = {\n    count: 0\n  };\n  add = () => {\n    //this.setState({count: this.state.count + 1 });  // this.state.count 는 좋지않은 코드\n    this.setState(current => ({ count: this.state.count + 1})); // setState를 호출하면 render를 Refresh 해줌.\n  };\n  minus = () => {\n    this.setState(current => ({ count: this.state.count - 1}));\n  };\n\n\n  componentDidMount(){console.log(\"component rendered\");}// Component가 render를 마치고 Mount될 때 호출\n  componentDidUpdate(){console.log(\"I just Updated\");}// Component가 Update될 때 호출 ex) plus/minus 버튼을 누르면 render가 Refresh\n  componentWillUnmount(){console.log(\"Good Bye\");} // Component가 Unmount될 때 호출\n  render(){\n    console.log(\"I'm rendering\");\n    return <div>\n        <h1>The number is: {this.state.count}</h1>\n        <button onClick={this.add}>Add</button>\n        <button onClick={this.minus}>Minus</button>\n      </div>\n  }\n}\n*/\n\nimport React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport Details from \"./routes/Details\";\nimport \"./App.css\";\nimport Navigation from \"./components/Navigation\";\n\n// 설치한 것들 : 'npm i axos', 'npm i gh-pages', 'npm i prop-types', 'npm i react-router-dom'\n\nfunction App(){\n  return (\n    // <BrowserRouter> 를 사용하면 주소에 '#'이 없음. 깃헙페이지에 설정하기가 번거로움\n    // Router 안에 있는 모든 Route들은 기본값으로 props를 가진다. 덕분에 클릭 한번으로 정보를 전달 가능.\n    <HashRouter>\n      <Navigation />\n      {/* exact 를 넣어줘야 component가 여러개 로딩되는것을 방지할 수 있음. */}\n      <Route path=\"/\" exact={true} component={Home}/> \n      <Route path=\"/about\" component={About}/>\n      {/* <Route path=\"/movie-details\" component={Details}/> */}\n      <Route path=\"/movie/:id\" component={Details}/>\n    </HashRouter>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}